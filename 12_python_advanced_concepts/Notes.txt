Advanced Modules:
============================================================================================
    - Collections
    - OS Modules and DateTime
    - Math and Random
    - Python debugger
    - Timeit
    - Regular Expressions
    - Unzipping and Zipping modules.


- Collections:
=============================================================================================

    Counter
    ==================

    The Collections module is built in based Python and it implements specialized container data types that are essentially alternatives to Python's built-in containers that are just general purpose.

    Built-in containers are something like Dictionary/ Tuples. But counter has specialized Dictionary objects or specialized Tuple objects.

    We may not need these specialized versions always, but in certain use cases we may find them quite useful.

    Common patterns when using the Counter() object
    ================================================
        sum(c.values())                 # total of all counts
        c.clear()                       # reset all counts
        list(c)                         # list unique elements
        set(c)                          # convert to a set
        dict(c)                         # convert to a regular dictionary
        c.items()                       # convert to a list of (elem, cnt) pairs
        Counter(dict(list_of_pairs))    # convert from a list of (elem, cnt) pairs
        c.most_common()[:-n-1:-1]       # n least common elements
        c += Counter()                  # remove zero and negative counts

    defaultdict
    ==================
    defaultdict is a dictionary-like object which provides all methods provided by a dictionary but takes a first argument (default_factory) as a default data type for the dictionary. Using defaultdict is faster than doing the same using dict.set_default method.

    A defaultdict will never raise a KeyError. Any key that does not exist gets the value returned by the default factory.

    namedtuple
    ==================
    The standard tuple uses numerical indexes to access its members, for example:

    t = (12,13,14)
    t[0]
    12
    For simple use cases, this is usually enough. On the other hand, remembering which index should be used for each value can lead to errors, especially if the tuple has a lot of fields and is constructed far from where it is used. A namedtuple assigns names, as well as the numerical index, to each member.

    Each kind of namedtuple is represented by its own class, created by using the namedtuple() factory function. The arguments are the name of the new class and a string containing the names of the elements.

    You can basically think of namedtuples as a very quick way of creating a new object/class type with some attribute fields.

- OS Modules and DateTime
=============================================================================================

    We already know how to open an individual file with Python, but still don't know how to do few things like:
        - Open every file in a directory.
        - Want to move files across our computer.

    Python's os module and shutil allow us to easily navigate files and directories on the computer and then perform actions on them, such as moving them or deleting them.
    
    The os module provides 3 methods for deleting files:
        - os.unlink(path) which deletes a file at the path your provide
        - os.rmdir(path) which deletes a folder (folder must be empty) at the path your provide
        - shutil.rmtree(path) this is the most dangerous, as it will remove all files and folders contained in the path. 

    All of these methods can not be reversed! Which means if you make a mistake you won't be able to recover the file. Instead we will use the send2trash module. A safer alternative that sends deleted files to the trash bin instead of permanent removal. ___

    Install the send2trash module with:
        - pip install send2trash

    DateTime
    ==================
        
        









